//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/Settings/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""PlayerKG"",
            ""id"": ""ba839710-4468-482b-ba17-37bca7e18db9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""da940cfd-de33-4cb4-bf4e-007911d3f69f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""1fd8ca20-ef7d-4716-9d6f-2b34eef68733"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Atk"",
                    ""type"": ""Value"",
                    ""id"": ""fcccbe8d-c996-4ee8-8997-09a0ff127349"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""edb9f215-89a2-4e53-b560-441dd00b8b72"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a75da73b-775b-4f05-8b09-ecdec89c672f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d23b6222-646a-44ab-8865-2e90c8f9fade"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d7ae5083-8471-44c9-be86-e8c3e6572b13"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""acd3d5f6-a0f5-4bad-891f-a19875473044"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a03f0299-657a-434b-8818-b91f2a942146"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up Down Left Right"",
                    ""id"": ""68cae554-f317-409f-8b8e-2082c761a748"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b7e138b8-817d-414b-b834-390f1d43c8cf"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4da55dd8-30ce-492b-80ba-c21a5ba5d273"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""44af0ee1-8a87-456d-ae47-003410ba2433"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8ccc73f3-259d-410f-90ad-7419f8805add"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""36404d38-0880-4c0b-b154-6a2e7fdbff97"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33345c34-73b7-4ab0-a273-2ec6b7b8b40e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Atk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0567137-427f-4149-a0ff-a65761d5aa94"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Atk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMT"",
            ""id"": ""0b9fc257-1aba-47e9-bd2b-fb08f8e2bb85"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""f61c90d3-2023-4279-8bd7-fe6e54f04491"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""d66d1cf4-9c71-4e5e-9289-5a27528d5b2d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4480c628-260e-4d68-ab0b-603a94dcadd8"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe8d7a17-9683-497e-bc85-e7c29fe60403"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1be29de4-ecc9-4c69-8ae7-0e22f73fa60c"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1407a2e6-9654-4dc0-aeba-1c99220f8888"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": []
        },
        {
            ""name"": ""TouchScreen"",
            ""bindingGroup"": ""TouchScreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerKG
        m_PlayerKG = asset.FindActionMap("PlayerKG", throwIfNotFound: true);
        m_PlayerKG_Move = m_PlayerKG.FindAction("Move", throwIfNotFound: true);
        m_PlayerKG_Aim = m_PlayerKG.FindAction("Aim", throwIfNotFound: true);
        m_PlayerKG_Atk = m_PlayerKG.FindAction("Atk", throwIfNotFound: true);
        // PlayerMT
        m_PlayerMT = asset.FindActionMap("PlayerMT", throwIfNotFound: true);
        m_PlayerMT_Move = m_PlayerMT.FindAction("Move", throwIfNotFound: true);
        m_PlayerMT_Direction = m_PlayerMT.FindAction("Direction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerKG
    private readonly InputActionMap m_PlayerKG;
    private IPlayerKGActions m_PlayerKGActionsCallbackInterface;
    private readonly InputAction m_PlayerKG_Move;
    private readonly InputAction m_PlayerKG_Aim;
    private readonly InputAction m_PlayerKG_Atk;
    public struct PlayerKGActions
    {
        private @InputControls m_Wrapper;
        public PlayerKGActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerKG_Move;
        public InputAction @Aim => m_Wrapper.m_PlayerKG_Aim;
        public InputAction @Atk => m_Wrapper.m_PlayerKG_Atk;
        public InputActionMap Get() { return m_Wrapper.m_PlayerKG; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerKGActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerKGActions instance)
        {
            if (m_Wrapper.m_PlayerKGActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerKGActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerKGActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerKGActionsCallbackInterface.OnMove;
                @Aim.started -= m_Wrapper.m_PlayerKGActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_PlayerKGActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_PlayerKGActionsCallbackInterface.OnAim;
                @Atk.started -= m_Wrapper.m_PlayerKGActionsCallbackInterface.OnAtk;
                @Atk.performed -= m_Wrapper.m_PlayerKGActionsCallbackInterface.OnAtk;
                @Atk.canceled -= m_Wrapper.m_PlayerKGActionsCallbackInterface.OnAtk;
            }
            m_Wrapper.m_PlayerKGActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Atk.started += instance.OnAtk;
                @Atk.performed += instance.OnAtk;
                @Atk.canceled += instance.OnAtk;
            }
        }
    }
    public PlayerKGActions @PlayerKG => new PlayerKGActions(this);

    // PlayerMT
    private readonly InputActionMap m_PlayerMT;
    private IPlayerMTActions m_PlayerMTActionsCallbackInterface;
    private readonly InputAction m_PlayerMT_Move;
    private readonly InputAction m_PlayerMT_Direction;
    public struct PlayerMTActions
    {
        private @InputControls m_Wrapper;
        public PlayerMTActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMT_Move;
        public InputAction @Direction => m_Wrapper.m_PlayerMT_Direction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMT; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMTActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMTActions instance)
        {
            if (m_Wrapper.m_PlayerMTActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerMTActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerMTActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerMTActionsCallbackInterface.OnMove;
                @Direction.started -= m_Wrapper.m_PlayerMTActionsCallbackInterface.OnDirection;
                @Direction.performed -= m_Wrapper.m_PlayerMTActionsCallbackInterface.OnDirection;
                @Direction.canceled -= m_Wrapper.m_PlayerMTActionsCallbackInterface.OnDirection;
            }
            m_Wrapper.m_PlayerMTActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Direction.started += instance.OnDirection;
                @Direction.performed += instance.OnDirection;
                @Direction.canceled += instance.OnDirection;
            }
        }
    }
    public PlayerMTActions @PlayerMT => new PlayerMTActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    private int m_TouchScreenSchemeIndex = -1;
    public InputControlScheme TouchScreenScheme
    {
        get
        {
            if (m_TouchScreenSchemeIndex == -1) m_TouchScreenSchemeIndex = asset.FindControlSchemeIndex("TouchScreen");
            return asset.controlSchemes[m_TouchScreenSchemeIndex];
        }
    }
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IPlayerKGActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnAtk(InputAction.CallbackContext context);
    }
    public interface IPlayerMTActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDirection(InputAction.CallbackContext context);
    }
}
